name: "Continuous Delivery (parser)"

on:
  workflow_run:
    workflows: ["Continuous Integration (parser)"]
    types: [completed]
    branches: [main]

permissions:
  contents: read

jobs:
  fetch-version:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-24.04
    outputs:
      release_version: ${{ steps.get_version.outputs.VERSION }}
      is_release: ${{ steps.check_snapshot.outputs.RELEASE }}
   
    steps:
      - name: 🛠️ Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: 📦 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🏷️ Get package version
        id: get_version
        run: echo "VERSION=$(cargo pkgid --quiet | cut -d '@' -f 2)" >> $GITHUB_OUTPUT
        working-directory: kaizen-parser/

      - name: 🔍 Check if version is SNAPSHOT
        id: check_snapshot
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [[ "$VERSION" == *"-snapshot"* ]]; then
            echo "RELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "RELEASE=true" >> $GITHUB_OUTPUT
          fi
          echo "Release Version: $VERSION"
        working-directory: kaizen-parser/

  generate-binaries:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: [fetch-version]
    runs-on: ${{ matrix.build.os }}
    
    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64-glibc,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-gnu
            }
          - {
              NAME: linux-x64-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-musl
            }
          - {
              NAME: linux-x86-glibc,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: i686-unknown-linux-gnu
            }
          - {
              NAME: linux-x86-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: i686-unknown-linux-musl
            }
          - {
              NAME: linux-arm64-glibc,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: aarch64-unknown-linux-gnu
            }
          - {
              NAME: linux-arm64-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: aarch64-unknown-linux-musl
            }
          - {
              NAME: win32-x64-mingw,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: x86_64-pc-windows-gnu
            }
          - {
              NAME: win32-x64-msvc,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: x86_64-pc-windows-msvc
            }
          - {
              NAME: win32-x86-msvc,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: i686-pc-windows-msvc
            }
          - {
              NAME: win32-arm64-msvc,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: aarch64-pc-windows-msvc
            }
          - {
              NAME: darwin-x64,
              OS: macos-15,
              TOOLCHAIN: stable,
              TARGET: x86_64-apple-darwin
            }
          - {
              NAME: darwin-arm64,
              OS: macos-15,
              TOOLCHAIN: stable,
              TARGET: aarch64-apple-darwin
            }

    env:
      RELEASE_VERSION: ${{ needs.fetch-version.outputs.release_version }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: ⚙️ Install dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends pkg-config libssl-dev
          if [[ "${{ matrix.build.NAME }}" = *"-musl" ]]; then
            sudo apt-get install -y --no-install-recommends \
              --allow-unauthenticated musl-tools
          fi

      - name: 🛠️ Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.build.TOOLCHAIN }}
          target: ${{ matrix.build.TARGET }}  

      - name: ➕ Add ${{ matrix.build.TARGET }} target
        run: rustup target add ${{ matrix.build.TARGET }}
        working-directory: kaizen-parser/

      - name: 🏗️ Build (linux/macos)
        if: matrix.build.OS != 'windows-2022'
        run: cargo build --release --locked --target ${{ matrix.build.TARGET }}
        working-directory: kaizen-parser/

      - name: 🏗️ Build (windows)
        if: matrix.build.OS == 'windows-2022'
        run: cargo build --release --locked --target ${{ matrix.build.TARGET }}
        working-directory: kaizen-parser/

      - name: 🗂️ Prepare assets
        shell: bash
        working-directory: kaizen-parser/
        run: |
          mkdir -p release
          cp {../LICENSE,README.md} release/

          for bin in 'parser'; do
            if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
              bin="${bin}.exe"
            fi
            cp "target/${{ matrix.build.TARGET }}/release/${bin}" release/
          done
          mv release/ kaizen-${{ env.RELEASE_VERSION }}/

      - name: 📦 Create artifacts
        shell: bash
        working-directory: kaizen-parser/
        run: |
          if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
            7z a -tzip "kaizen-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.zip" \
              kaizen-${{ env.RELEASE_VERSION }}/
          else
            tar -czvf kaizen-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.tar.gz \
              kaizen-${{ env.RELEASE_VERSION }}/
            shasum -a 512 kaizen-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.tar.gz \
              > kaizen-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.tar.gz.sha512
          fi

      - name: ⬆️ Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "kaizen-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}"
          path: "kaizen-parser/kaizen-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.*"

  release:
    needs: [fetch-version, generate-binaries]
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.fetch-version.outputs.is_release == 'true' }}
    runs-on: ubuntu-24.04

    permissions:
      contents: write
      packages: write
    
    env:
      RELEASE_VERSION: ${{ needs.fetch-version.outputs.release_version }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 

      - name: 🛠️ Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: 🔖 Create Git Tag
        run: |
          git config user.name "radagastbot[bot]"
          git config user.email "radagastbot[bot]@users.noreply.github.com"
          git tag "v${{ env.RELEASE_VERSION }}"
          git push origin "v${{ env.RELEASE_VERSION }}"

      - name: 📝 Generate a changelog
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --verbose
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      - name: ⬇️ Download generated binaries 
        uses: actions/download-artifact@v5
        with:
          path: artifacts/

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2.3.2
        with:
          files: artifacts/*/kaizen-${{ env.RELEASE_VERSION }}-*
          tag_name: v${{ env.RELEASE_VERSION }}
          name: Release kaizen v${{ env.RELEASE_VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: true

      - name: 🔢 Generate next package Version
        run: |
          MAJOR=$(echo ${{ env.RELEASE_VERSION }} | cut -d. -f1)
          MINOR=$(echo ${{ env.RELEASE_VERSION }} | cut -d. -f2)
          PATCH=$(echo ${{ env.RELEASE_VERSION }} | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEXT_PLUGIN_VERSION="$MAJOR.$MINOR.$PATCH-snapshot"
          echo "Next Version will be: ${NEXT_PLUGIN_VERSION}"
          echo "NEXT_PLUGIN_VERSION=${NEXT_PLUGIN_VERSION}" >> $GITHUB_ENV

      - name: 🛠️ Install cargo-set-version
        run: cargo install cargo-set-version
        working-directory: kaizen-parser/

      - name: ⬆️ Increment package version
        run: cargo set-version ${{ env.NEXT_PLUGIN_VERSION }}
        working-directory: kaizen-parser/

      - name: 📤 Push new package version to repo
        working-directory: kaizen-parser/
        run: |
          git config user.name "radagastbot[bot]"
          git config user.email "radagastbot[bot]@users.noreply.github.com"
          git add Cargo.toml 
          git add Cargo.lock 
          git commit -m "chore(release): set next snapshot version"
          git push
